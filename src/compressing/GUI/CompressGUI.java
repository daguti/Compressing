/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package compressing.GUI;

import compressing.Threads.CompressingTask;
import compressing.Threads.DecompressingTask;
import java.awt.Color;
import java.io.File;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;

/**
 *
 * @author ESa10969
 */
public class CompressGUI extends javax.swing.JFrame {

    /**
     * Creates new form CompressGUI
     */
    public CompressGUI() {
        for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
            if ("Nimbus".equals(info.getName())) {
                try {
                    UIManager.setLookAndFeel(info.getClassName());
                    UIManager.getLookAndFeelDefaults().put("nimbusOrange", (new Color(50,205,50))); 
                    //UIManager.getLookAndFeelDefaults().put("background", (new Color(115,164,209))); 
                } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
                    Logger.getLogger(CompressGUI.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;
            }
        }
        this.getContentPane().setBackground(new Color(115,164,209));
        initComponents();
        this.pack();
        this.setLocationRelativeTo(null);        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        gzipFilePath = new javax.swing.JTextField();
        selectFile = new javax.swing.JButton();
        compressBtn = new javax.swing.JButton();
        pbar = new javax.swing.JProgressBar();
        uncompressBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        selectDirectory = new javax.swing.JButton();
        zipDirectoryPath = new javax.swing.JTextField();
        processLab = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setAutoRequestFocus(false);
        setBackground(new java.awt.Color(0, 153, 204));
        setForeground(new java.awt.Color(0, 153, 204));

        gzipFilePath.setDisabledTextColor(new java.awt.Color(255, 255, 255));
        gzipFilePath.setEnabled(false);

        selectFile.setBackground(new java.awt.Color(0, 204, 255));
        selectFile.setText("Browse");
        selectFile.setBorderPainted(false);
        selectFile.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                selectFileMouseClicked(evt);
            }
        });

        compressBtn.setBackground(new java.awt.Color(0, 204, 255));
        compressBtn.setText("Compress");
        compressBtn.setBorderPainted(false);
        compressBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                compressBtnMouseClicked(evt);
            }
        });

        pbar.setBackground(new java.awt.Color(0, 204, 255));
        pbar.setForeground(new java.awt.Color(0, 0, 0));
        pbar.setBorderPainted(false);
        pbar.setOpaque(true);

        uncompressBtn.setBackground(new java.awt.Color(0, 204, 255));
        uncompressBtn.setText("Decompress");
        uncompressBtn.setBorderPainted(false);
        uncompressBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                uncompressBtnMouseClicked(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Old English Text MT", 1, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("GZip/UnGZip File ");

        jLabel2.setFont(new java.awt.Font("Old English Text MT", 1, 18)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Zip/UnZip Directory ");

        selectDirectory.setBackground(new java.awt.Color(0, 204, 255));
        selectDirectory.setText("Browse");
        selectDirectory.setBorderPainted(false);
        selectDirectory.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                selectDirectoryMouseClicked(evt);
            }
        });

        zipDirectoryPath.setDisabledTextColor(new java.awt.Color(255, 255, 255));
        zipDirectoryPath.setEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(zipDirectoryPath)
                        .addGap(11, 11, 11)
                        .addComponent(selectDirectory))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(gzipFilePath)
                        .addGap(10, 10, 10)
                        .addComponent(selectFile))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(compressBtn)
                        .addGap(140, 140, 140)
                        .addComponent(uncompressBtn))
                    .addComponent(pbar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(11, 11, 11))
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(processLab, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(gzipFilePath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(selectFile))
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(zipDirectoryPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(selectDirectory))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(compressBtn)
                    .addComponent(uncompressBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(processLab, javax.swing.GroupLayout.PREFERRED_SIZE, 0, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pbar, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void selectFileMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_selectFileMouseClicked
        //Variable definition
        int returnVal;
        File file = null;
         
        fc = new JFileChooser();
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);

        returnVal = fc.showOpenDialog(CompressGUI.this);
        if (returnVal == JFileChooser.APPROVE_OPTION) { 
           file = fc.getSelectedFile();
        }
        if(file != null && file.getPath() != null) {
            gzipFilePath.setText(file.getPath());
        }
    }//GEN-LAST:event_selectFileMouseClicked

    private void compressBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_compressBtnMouseClicked
        String path = gzipFilePath.getText().equals("") ? zipDirectoryPath.getText() : gzipFilePath.getText();
        CompressingTask cmpTsk = new CompressingTask(path, pbar, this, processLab);
        cmpTsk.start();
        
        gzipFilePath.setText("");
        zipDirectoryPath.setText("");
    }//GEN-LAST:event_compressBtnMouseClicked

    private void uncompressBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_uncompressBtnMouseClicked
        String path = gzipFilePath.getText().equals("") ? zipDirectoryPath.getText() : gzipFilePath.getText();
        DecompressingTask dcmpTsk = new DecompressingTask(path, pbar, this, processLab);
        dcmpTsk.start();
       
        gzipFilePath.setText("");
        zipDirectoryPath.setText("");
    }//GEN-LAST:event_uncompressBtnMouseClicked

    private void selectDirectoryMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_selectDirectoryMouseClicked
        //Variable definition
        int returnVal;
        File file = null;
         
        fc = new JFileChooser();
        fc.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);

        returnVal = fc.showOpenDialog(CompressGUI.this);
        if (returnVal == JFileChooser.APPROVE_OPTION) { 
           file = fc.getSelectedFile();
        }
        if(file != null && file.getPath() != null) {
            zipDirectoryPath.setText(file.getPath());
        }
    }//GEN-LAST:event_selectDirectoryMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CompressGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CompressGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CompressGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CompressGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                JFrame frame = new CompressGUI();
                frame.setTitle("Gzip & Zip");
                String pathToImageSortBy = "resources/compicon.png";
                ImageIcon img = new ImageIcon(this.getClass().getClassLoader().getResource(pathToImageSortBy));
                frame.setIconImage(img.getImage());
                frame.setVisible(true);
            }
        });
    }
    private JFileChooser fc;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton compressBtn;
    private javax.swing.JTextField gzipFilePath;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JProgressBar pbar;
    private javax.swing.JLabel processLab;
    private javax.swing.JButton selectDirectory;
    private javax.swing.JButton selectFile;
    private javax.swing.JButton uncompressBtn;
    private javax.swing.JTextField zipDirectoryPath;
    // End of variables declaration//GEN-END:variables
}
